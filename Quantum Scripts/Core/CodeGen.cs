// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109

namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum AIDifficulty : byte {
    Easy,
    Normal,
    Hard,
    Expert,
    Pro,
  }
  public enum AIPlayerState : byte {
    None = 0,
    Idle,
    Chase,
    RandomPosition,
    FleeFromOtherPlayers,
    Max,
  }
  public enum BallEvent : int {
    None,
    Event_ResetMovementLogic,
    Event_Active_FreezeBall,
    Event_Active_FastBall,
    Event_Active_CurveBall,
    Event_Active_SkyRocketBall,
  }
  public enum BallMovementLogic : byte {
    Default,
    FreezeBall,
    FastBall,
    CurveBall,
    SkyRocketBall,
  }
  public enum CheatType : byte {
    None = 0,
    KillSelf,
    InvincibleSelf,
    AutoAttack,
    HealHP,
    BallDamageZero,
    BallMaxSpeed,
    AllPlayerHpToOne,
    KillAllButMe,
    Max,
  }
  public enum GamePlayState : byte {
    None = 0,
    Wait,
    CountDown,
    Play,
    End,
  }
  public enum GetBallTargetType : byte {
    None = 0,
    FirstInList,
    Random,
    Closest,
    ClosestOrRandom,
    ClosestToFront,
    ClosestPlusClosestToFront,
    Max,
  }
  public enum InGamePlayMode : byte {
    SoloMode,
    TeamMode,
    PracticeMode,
  }
  public enum MapObjectType : int {
    Default,
    StaticWall,
    StaticPillar,
    MovingPillar,
  }
  public enum PlayerActiveSkill : byte {
    None = 0,
    Dash,
    FreezeBall,
    FastBall,
    Shield,
    TakeBallTarget,
    BlindZone,
    ChangeBallTarget,
    CurveBall,
    SkyRocketBall,
    Max,
  }
  public enum PlayerEvent : int {
    None = 0,
    Event_Jump_First,
    Event_Jump_Second,
    Event_AttackAttempt,
    Event_AttackSuccess,
    Event_Hit,
    Event_Die,
    Event_Skill_Register_FastBall,
    Event_Skill_Register_CurveBall,
    Event_Skill_Register_SkyRocketBall,
    Event_Skill_Active_Dash,
    Event_Skill_Active_FreezeBall,
    Event_Skill_Active_FastBall,
    Event_Skill_Active_Shield,
    Event_Skill_Active_TakeBallTarget,
    Event_Skill_Active_BlindZone,
    Event_Skill_Active_ChangeBallTarget,
    Event_Skill_Active_CurveBall,
    Event_Skill_Active_SkyRocketBall,
    Event_Skill_Deactive_Shield,
    Max,
  }
  public enum PlayerPassiveSkill : byte {
    None = 0,
    IncreaseMaxHp,
    IncreaseSpeed,
    IncreaseAttackDamage,
    Max,
  }
  public enum PlayerSkilLaunchTiming : byte {
    None = 0,
    InputImmediately,
    Before_AttackSuccess,
    After_AttackSuccess,
    InsideAttackRange,
    Max,
  }
  public enum PlayerSkilRemoveTiming : byte {
    None = 0,
    After_SkillLaunch,
    After_AttackSuccess,
    After_Hit,
    After_TimeElapsed,
    After_ShieldSuccess,
    Max,
  }
  public enum PlayerType : byte {
    None = 0,
    RealPlayer,
    AIPlayer,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet6* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet6* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(CustomMapDataSettings))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefCustomMapDataSettings : IEquatable<AssetRefCustomMapDataSettings>, IAssetRef<CustomMapDataSettings> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefCustomMapDataSettings(CustomMapDataSettings value) {
      var r = default(AssetRefCustomMapDataSettings);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefCustomMapDataSettings other && Equals(other);
    }
    public Boolean Equals(AssetRefCustomMapDataSettings other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefCustomMapDataSettings a, AssetRefCustomMapDataSettings b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefCustomMapDataSettings a, AssetRefCustomMapDataSettings b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefCustomMapDataSettings*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(DynamicCreateObject))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefDynamicCreateObject : IEquatable<AssetRefDynamicCreateObject>, IAssetRef<DynamicCreateObject> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefDynamicCreateObject(DynamicCreateObject value) {
      var r = default(AssetRefDynamicCreateObject);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefDynamicCreateObject other && Equals(other);
    }
    public Boolean Equals(AssetRefDynamicCreateObject other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefDynamicCreateObject a, AssetRefDynamicCreateObject b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefDynamicCreateObject a, AssetRefDynamicCreateObject b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefDynamicCreateObject*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GamePlaySettings))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGamePlaySettings : IEquatable<AssetRefGamePlaySettings>, IAssetRef<GamePlaySettings> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGamePlaySettings(GamePlaySettings value) {
      var r = default(AssetRefGamePlaySettings);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGamePlaySettings other && Equals(other);
    }
    public Boolean Equals(AssetRefGamePlaySettings other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGamePlaySettings a, AssetRefGamePlaySettings b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGamePlaySettings a, AssetRefGamePlaySettings b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGamePlaySettings*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(InGameDataSettings))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefInGameDataSettings : IEquatable<AssetRefInGameDataSettings>, IAssetRef<InGameDataSettings> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefInGameDataSettings(InGameDataSettings value) {
      var r = default(AssetRefInGameDataSettings);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefInGameDataSettings other && Equals(other);
    }
    public Boolean Equals(AssetRefInGameDataSettings other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefInGameDataSettings a, AssetRefInGameDataSettings b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefInGameDataSettings a, AssetRefInGameDataSettings b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefInGameDataSettings*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIDefaultData {
    public const Int32 SIZE = 100;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 CoolTime_BlindZone;
    [FieldOffset(4)]
    public Int32 CoolTime_ChangeBallTarget;
    [FieldOffset(8)]
    public Int32 CoolTime_CurveBall;
    [FieldOffset(12)]
    public Int32 CoolTime_Dash;
    [FieldOffset(16)]
    public Int32 CoolTime_FastBall;
    [FieldOffset(20)]
    public Int32 CoolTime_FreezeBall;
    [FieldOffset(24)]
    public Int32 CoolTime_Shield;
    [FieldOffset(28)]
    public Int32 CoolTime_SkyRocketBall;
    [FieldOffset(32)]
    public Int32 CoolTime_TakeBallTarget;
    [FieldOffset(36)]
    public PlayerDefaultData PlayerAdditionalStatsData;
    [FieldOffset(68)]
    public PlayerDefaultData PlayerDafaultData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + CoolTime_BlindZone.GetHashCode();
        hash = hash * 31 + CoolTime_ChangeBallTarget.GetHashCode();
        hash = hash * 31 + CoolTime_CurveBall.GetHashCode();
        hash = hash * 31 + CoolTime_Dash.GetHashCode();
        hash = hash * 31 + CoolTime_FastBall.GetHashCode();
        hash = hash * 31 + CoolTime_FreezeBall.GetHashCode();
        hash = hash * 31 + CoolTime_Shield.GetHashCode();
        hash = hash * 31 + CoolTime_SkyRocketBall.GetHashCode();
        hash = hash * 31 + CoolTime_TakeBallTarget.GetHashCode();
        hash = hash * 31 + PlayerAdditionalStatsData.GetHashCode();
        hash = hash * 31 + PlayerDafaultData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIDefaultData*)ptr;
        serializer.Stream.Serialize(&p->CoolTime_BlindZone);
        serializer.Stream.Serialize(&p->CoolTime_ChangeBallTarget);
        serializer.Stream.Serialize(&p->CoolTime_CurveBall);
        serializer.Stream.Serialize(&p->CoolTime_Dash);
        serializer.Stream.Serialize(&p->CoolTime_FastBall);
        serializer.Stream.Serialize(&p->CoolTime_FreezeBall);
        serializer.Stream.Serialize(&p->CoolTime_Shield);
        serializer.Stream.Serialize(&p->CoolTime_SkyRocketBall);
        serializer.Stream.Serialize(&p->CoolTime_TakeBallTarget);
        Quantum.PlayerDefaultData.Serialize(&p->PlayerAdditionalStatsData, serializer);
        Quantum.PlayerDefaultData.Serialize(&p->PlayerDafaultData, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AdditionalReferenceData {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AdditionalReferenceData*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BallDefaultData {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 BallCollisionCooltime;
    [FieldOffset(4)]
    public Int32 BallIncreaseSpeed;
    [FieldOffset(8)]
    public Int32 BallMaxSpeed;
    [FieldOffset(12)]
    public Int32 BallMinSpeed;
    [FieldOffset(16)]
    public Int32 BallRotationIncreaseSpeed;
    [FieldOffset(20)]
    public Int32 BallRotationMaxSpeed;
    [FieldOffset(24)]
    public Int32 BallRotationMinSpeed;
    [FieldOffset(28)]
    public Int32 BallRotationSpeed;
    [FieldOffset(32)]
    public Int32 BallStartSpeed;
    [FieldOffset(36)]
    public Int32 DefaultAttackDamage;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + BallCollisionCooltime.GetHashCode();
        hash = hash * 31 + BallIncreaseSpeed.GetHashCode();
        hash = hash * 31 + BallMaxSpeed.GetHashCode();
        hash = hash * 31 + BallMinSpeed.GetHashCode();
        hash = hash * 31 + BallRotationIncreaseSpeed.GetHashCode();
        hash = hash * 31 + BallRotationMaxSpeed.GetHashCode();
        hash = hash * 31 + BallRotationMinSpeed.GetHashCode();
        hash = hash * 31 + BallRotationSpeed.GetHashCode();
        hash = hash * 31 + BallStartSpeed.GetHashCode();
        hash = hash * 31 + DefaultAttackDamage.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BallDefaultData*)ptr;
        serializer.Stream.Serialize(&p->BallCollisionCooltime);
        serializer.Stream.Serialize(&p->BallIncreaseSpeed);
        serializer.Stream.Serialize(&p->BallMaxSpeed);
        serializer.Stream.Serialize(&p->BallMinSpeed);
        serializer.Stream.Serialize(&p->BallRotationIncreaseSpeed);
        serializer.Stream.Serialize(&p->BallRotationMaxSpeed);
        serializer.Stream.Serialize(&p->BallRotationMinSpeed);
        serializer.Stream.Serialize(&p->BallRotationSpeed);
        serializer.Stream.Serialize(&p->BallStartSpeed);
        serializer.Stream.Serialize(&p->DefaultAttackDamage);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct InGamePlayStatisticsArray {
    public const Int32 SIZE = 320;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(InGamePlayStatisticsData), 10)]
    private fixed Byte _InGamePlayStatisticsDataArr_[320];
    public FixedArray<InGamePlayStatisticsData> InGamePlayStatisticsDataArr {
      get {
        fixed (byte* p = _InGamePlayStatisticsDataArr_) { return new FixedArray<InGamePlayStatisticsData>(p, 32, 10); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(InGamePlayStatisticsDataArr);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (InGamePlayStatisticsArray*)ptr;
        FixedArray.Serialize(p->InGamePlayStatisticsDataArr, serializer, StaticDelegates.SerializeInGamePlayStatisticsData);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct InGamePlayStatisticsData {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Byte activeSkillType;
    [FieldOffset(8)]
    public Int32 attackSuccessCount;
    [FieldOffset(2)]
    public Int16 dieCount;
    [FieldOffset(4)]
    public Int16 killCount;
    [FieldOffset(12)]
    public Int32 mapID;
    [FieldOffset(16)]
    public Int32 matchPlayMode;
    [FieldOffset(1)]
    public Byte passiveSkillType;
    [FieldOffset(24)]
    public EntityRef player;
    [FieldOffset(20)]
    public Int32 skillActivationCount;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + activeSkillType.GetHashCode();
        hash = hash * 31 + attackSuccessCount.GetHashCode();
        hash = hash * 31 + dieCount.GetHashCode();
        hash = hash * 31 + killCount.GetHashCode();
        hash = hash * 31 + mapID.GetHashCode();
        hash = hash * 31 + matchPlayMode.GetHashCode();
        hash = hash * 31 + passiveSkillType.GetHashCode();
        hash = hash * 31 + player.GetHashCode();
        hash = hash * 31 + skillActivationCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (InGamePlayStatisticsData*)ptr;
        serializer.Stream.Serialize(&p->activeSkillType);
        serializer.Stream.Serialize(&p->passiveSkillType);
        serializer.Stream.Serialize(&p->dieCount);
        serializer.Stream.Serialize(&p->killCount);
        serializer.Stream.Serialize(&p->attackSuccessCount);
        serializer.Stream.Serialize(&p->mapID);
        serializer.Stream.Serialize(&p->matchPlayMode);
        serializer.Stream.Serialize(&p->skillActivationCount);
        EntityRef.Serialize(&p->player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public QBoolean Attack;
    [FieldOffset(4)]
    public QBoolean Jump;
    [FieldOffset(8)]
    public QBoolean Skill;
    [FieldOffset(32)]
    public FPVector3 cameraDirection;
    [FieldOffset(16)]
    public FP horizontal;
    [FieldOffset(24)]
    public FP vertical;
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + Skill.GetHashCode();
        hash = hash * 31 + cameraDirection.GetHashCode();
        hash = hash * 31 + horizontal.GetHashCode();
        hash = hash * 31 + vertical.GetHashCode();
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        QBoolean.Serialize(&p->Attack, serializer);
        QBoolean.Serialize(&p->Jump, serializer);
        QBoolean.Serialize(&p->Skill, serializer);
        FP.Serialize(&p->horizontal, serializer);
        FP.Serialize(&p->vertical, serializer);
        FPVector3.Serialize(&p->cameraDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerDefaultData {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 AttackDamage;
    [FieldOffset(4)]
    public Int32 AttackDuration;
    [FieldOffset(8)]
    public Int32 AttackRange;
    [FieldOffset(12)]
    public Int32 Input_AttackCooltime;
    [FieldOffset(16)]
    public Int32 Input_JumpCooltime;
    [FieldOffset(20)]
    public Int32 Input_SkillCooltime;
    [FieldOffset(24)]
    public Int32 MaxHealthPoint;
    [FieldOffset(28)]
    public Int32 MaxSpeed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + AttackDamage.GetHashCode();
        hash = hash * 31 + AttackDuration.GetHashCode();
        hash = hash * 31 + AttackRange.GetHashCode();
        hash = hash * 31 + Input_AttackCooltime.GetHashCode();
        hash = hash * 31 + Input_JumpCooltime.GetHashCode();
        hash = hash * 31 + Input_SkillCooltime.GetHashCode();
        hash = hash * 31 + MaxHealthPoint.GetHashCode();
        hash = hash * 31 + MaxSpeed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerDefaultData*)ptr;
        serializer.Stream.Serialize(&p->AttackDamage);
        serializer.Stream.Serialize(&p->AttackDuration);
        serializer.Stream.Serialize(&p->AttackRange);
        serializer.Stream.Serialize(&p->Input_AttackCooltime);
        serializer.Stream.Serialize(&p->Input_JumpCooltime);
        serializer.Stream.Serialize(&p->Input_SkillCooltime);
        serializer.Stream.Serialize(&p->MaxHealthPoint);
        serializer.Stream.Serialize(&p->MaxSpeed);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerRankInfo {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef player;
    [FieldOffset(0)]
    public Int32 rank_solo;
    [FieldOffset(4)]
    public Int32 rank_team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + player.GetHashCode();
        hash = hash * 31 + rank_solo.GetHashCode();
        hash = hash * 31 + rank_team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerRankInfo*)ptr;
        serializer.Stream.Serialize(&p->rank_solo);
        serializer.Stream.Serialize(&p->rank_team);
        EntityRef.Serialize(&p->player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerRankInfoArray {
    public const Int32 SIZE = 160;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(PlayerRankInfo), 10)]
    private fixed Byte _PlayerRankInfoArr_[160];
    public FixedArray<PlayerRankInfo> PlayerRankInfoArr {
      get {
        fixed (byte* p = _PlayerRankInfoArr_) { return new FixedArray<PlayerRankInfo>(p, 16, 10); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(PlayerRankInfoArr);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerRankInfoArray*)ptr;
        FixedArray.Serialize(p->PlayerRankInfoArr, serializer, StaticDelegates.SerializePlayerRankInfo);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 888;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FP DeltaTime;
    [FieldOffset(88)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(8)]
    public AssetRefMap Map;
    [FieldOffset(32)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(592)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(40)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(56)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(16)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(72)]
    public RNGSession RngSession;
    [FieldOffset(464)]
    public BitSet1024 Systems;
    [FieldOffset(0)]
    public GamePlayState gamePlayState;
    [FieldOffset(128)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[336];
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 56, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + (Byte)gamePlayState;
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        serializer.Stream.Serialize((Byte*)&p->gamePlayState);
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        FixedArray.Serialize(p->input, serializer, StaticDelegates.SerializeInput);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIPlayerRules : Quantum.IComponent {
    public const Int32 SIZE = 200;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public AIDifficulty AIDifficulty;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public EntityRef FollowTargetEntity;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public Int32 RankingPoint;
    [FieldOffset(136)]
    [ExcludeFromPrototype()]
    public RNGSession RngSession;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public EntityRef SelfEntity;
    [FieldOffset(1)]
    [ExcludeFromPrototype()]
    public AIPlayerState aiPlayerState;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public FP attackCooltime;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public FP attackCooltimeCounter;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public FP doubleJumpCooltime;
    [FieldOffset(64)]
    [ExcludeFromPrototype()]
    public FP doubleJumpCooltimeCounter;
    [FieldOffset(152)]
    [ExcludeFromPrototype()]
    public FPVector3 fleeDirection;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public QBoolean isInputAttack;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    public QBoolean isInputJump;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public QBoolean isInputSkill;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public FP jumpCooltime;
    [FieldOffset(80)]
    [ExcludeFromPrototype()]
    public FP jumpCooltimeCounter;
    [FieldOffset(176)]
    [ExcludeFromPrototype()]
    public FPVector3 randomPosition;
    [FieldOffset(88)]
    [ExcludeFromPrototype()]
    public FP raycastStateChangeCooltime;
    [FieldOffset(96)]
    [ExcludeFromPrototype()]
    public FP raycastStateChangeCooltimeCounter;
    [FieldOffset(104)]
    [ExcludeFromPrototype()]
    public FP skillCooltime;
    [FieldOffset(112)]
    [ExcludeFromPrototype()]
    public FP skillCooltimeCounter;
    [FieldOffset(120)]
    [ExcludeFromPrototype()]
    public FP stateCooltime;
    [FieldOffset(128)]
    [ExcludeFromPrototype()]
    public FP stateCooltimeCounter;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + (Byte)AIDifficulty;
        hash = hash * 31 + FollowTargetEntity.GetHashCode();
        hash = hash * 31 + RankingPoint.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + SelfEntity.GetHashCode();
        hash = hash * 31 + (Byte)aiPlayerState;
        hash = hash * 31 + attackCooltime.GetHashCode();
        hash = hash * 31 + attackCooltimeCounter.GetHashCode();
        hash = hash * 31 + doubleJumpCooltime.GetHashCode();
        hash = hash * 31 + doubleJumpCooltimeCounter.GetHashCode();
        hash = hash * 31 + fleeDirection.GetHashCode();
        hash = hash * 31 + isInputAttack.GetHashCode();
        hash = hash * 31 + isInputJump.GetHashCode();
        hash = hash * 31 + isInputSkill.GetHashCode();
        hash = hash * 31 + jumpCooltime.GetHashCode();
        hash = hash * 31 + jumpCooltimeCounter.GetHashCode();
        hash = hash * 31 + randomPosition.GetHashCode();
        hash = hash * 31 + raycastStateChangeCooltime.GetHashCode();
        hash = hash * 31 + raycastStateChangeCooltimeCounter.GetHashCode();
        hash = hash * 31 + skillCooltime.GetHashCode();
        hash = hash * 31 + skillCooltimeCounter.GetHashCode();
        hash = hash * 31 + stateCooltime.GetHashCode();
        hash = hash * 31 + stateCooltimeCounter.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIPlayerRules*)ptr;
        serializer.Stream.Serialize((Byte*)&p->AIDifficulty);
        serializer.Stream.Serialize((Byte*)&p->aiPlayerState);
        serializer.Stream.Serialize(&p->RankingPoint);
        QBoolean.Serialize(&p->isInputAttack, serializer);
        QBoolean.Serialize(&p->isInputJump, serializer);
        QBoolean.Serialize(&p->isInputSkill, serializer);
        EntityRef.Serialize(&p->FollowTargetEntity, serializer);
        EntityRef.Serialize(&p->SelfEntity, serializer);
        FP.Serialize(&p->attackCooltime, serializer);
        FP.Serialize(&p->attackCooltimeCounter, serializer);
        FP.Serialize(&p->doubleJumpCooltime, serializer);
        FP.Serialize(&p->doubleJumpCooltimeCounter, serializer);
        FP.Serialize(&p->jumpCooltime, serializer);
        FP.Serialize(&p->jumpCooltimeCounter, serializer);
        FP.Serialize(&p->raycastStateChangeCooltime, serializer);
        FP.Serialize(&p->raycastStateChangeCooltimeCounter, serializer);
        FP.Serialize(&p->skillCooltime, serializer);
        FP.Serialize(&p->skillCooltimeCounter, serializer);
        FP.Serialize(&p->stateCooltime, serializer);
        FP.Serialize(&p->stateCooltimeCounter, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FPVector3.Serialize(&p->fleeDirection, serializer);
        FPVector3.Serialize(&p->randomPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BallRules : Quantum.IComponent {
    public const Int32 SIZE = 328;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public FP BallCollisionCooltime;
    [FieldOffset(64)]
    [ExcludeFromPrototype()]
    public FP BallCollisionCooltimeCounter;
    [FieldOffset(208)]
    [ExcludeFromPrototype()]
    public FPVector3 BallForcedDirection;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public FP BallForcedDist;
    [FieldOffset(80)]
    [ExcludeFromPrototype()]
    public FP BallForcedDistCounter;
    [FieldOffset(88)]
    [ExcludeFromPrototype()]
    public FP BallIncreaseSpeed;
    [FieldOffset(96)]
    [ExcludeFromPrototype()]
    public FP BallMaxSpeed;
    [FieldOffset(104)]
    [ExcludeFromPrototype()]
    public FP BallMinSpeed;
    [FieldOffset(232)]
    [ExcludeFromPrototype()]
    public FPVector3 BallObjstacleAvoidDirection;
    [FieldOffset(112)]
    [ExcludeFromPrototype()]
    public FP BallRotationIncreaseSpeed;
    [FieldOffset(120)]
    [ExcludeFromPrototype()]
    public FP BallRotationMaxSpeed;
    [FieldOffset(128)]
    [ExcludeFromPrototype()]
    public FP BallRotationMinSpeed;
    [FieldOffset(136)]
    [ExcludeFromPrototype()]
    public FP BallRotationSpeed;
    [FieldOffset(144)]
    [ExcludeFromPrototype()]
    public FP BallSpeed;
    [FieldOffset(152)]
    [ExcludeFromPrototype()]
    public FP BallStartSpeed;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public BallMovementLogic CurrMovementLogic;
    [FieldOffset(256)]
    [ExcludeFromPrototype()]
    public FPVector3 CurveBallForcedDirection;
    [FieldOffset(160)]
    [ExcludeFromPrototype()]
    public FP CurveBallForcedDist;
    [FieldOffset(168)]
    [ExcludeFromPrototype()]
    public FP CurveBallForcedDistCounter;
    [FieldOffset(176)]
    [ExcludeFromPrototype()]
    public FP CurveBallRotationSpeed;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public Int32 DefaultAttackDamage;
    [FieldOffset(184)]
    [ExcludeFromPrototype()]
    public FP ErrorCheckTimer;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public Int32 ErrorValidTime;
    [FieldOffset(192)]
    [ExcludeFromPrototype()]
    public FP FreezeBallCooltime;
    [FieldOffset(200)]
    [ExcludeFromPrototype()]
    public FP FreezeBallCooltimeCounter;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public EntityRef PreviousEntity;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public EntityRef SelfEntity;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    public QBoolean SkyRocketBallGoingUpFinished;
    [FieldOffset(280)]
    [ExcludeFromPrototype()]
    public FPVector3 SkyRocketBallGoingUpPosition;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public EntityRef TargetEntity;
    [FieldOffset(304)]
    [ExcludeFromPrototype()]
    public FPVector3 TargetPosition;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public QBoolean isActive;
    [FieldOffset(20)]
    [ExcludeFromPrototype()]
    public QBoolean isNoDamage;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public QBoolean isRayCastHit;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + BallCollisionCooltime.GetHashCode();
        hash = hash * 31 + BallCollisionCooltimeCounter.GetHashCode();
        hash = hash * 31 + BallForcedDirection.GetHashCode();
        hash = hash * 31 + BallForcedDist.GetHashCode();
        hash = hash * 31 + BallForcedDistCounter.GetHashCode();
        hash = hash * 31 + BallIncreaseSpeed.GetHashCode();
        hash = hash * 31 + BallMaxSpeed.GetHashCode();
        hash = hash * 31 + BallMinSpeed.GetHashCode();
        hash = hash * 31 + BallObjstacleAvoidDirection.GetHashCode();
        hash = hash * 31 + BallRotationIncreaseSpeed.GetHashCode();
        hash = hash * 31 + BallRotationMaxSpeed.GetHashCode();
        hash = hash * 31 + BallRotationMinSpeed.GetHashCode();
        hash = hash * 31 + BallRotationSpeed.GetHashCode();
        hash = hash * 31 + BallSpeed.GetHashCode();
        hash = hash * 31 + BallStartSpeed.GetHashCode();
        hash = hash * 31 + (Byte)CurrMovementLogic;
        hash = hash * 31 + CurveBallForcedDirection.GetHashCode();
        hash = hash * 31 + CurveBallForcedDist.GetHashCode();
        hash = hash * 31 + CurveBallForcedDistCounter.GetHashCode();
        hash = hash * 31 + CurveBallRotationSpeed.GetHashCode();
        hash = hash * 31 + DefaultAttackDamage.GetHashCode();
        hash = hash * 31 + ErrorCheckTimer.GetHashCode();
        hash = hash * 31 + ErrorValidTime.GetHashCode();
        hash = hash * 31 + FreezeBallCooltime.GetHashCode();
        hash = hash * 31 + FreezeBallCooltimeCounter.GetHashCode();
        hash = hash * 31 + PreviousEntity.GetHashCode();
        hash = hash * 31 + SelfEntity.GetHashCode();
        hash = hash * 31 + SkyRocketBallGoingUpFinished.GetHashCode();
        hash = hash * 31 + SkyRocketBallGoingUpPosition.GetHashCode();
        hash = hash * 31 + TargetEntity.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + isActive.GetHashCode();
        hash = hash * 31 + isNoDamage.GetHashCode();
        hash = hash * 31 + isRayCastHit.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BallRules*)ptr;
        serializer.Stream.Serialize((Byte*)&p->CurrMovementLogic);
        serializer.Stream.Serialize(&p->DefaultAttackDamage);
        serializer.Stream.Serialize(&p->ErrorValidTime);
        QBoolean.Serialize(&p->SkyRocketBallGoingUpFinished, serializer);
        QBoolean.Serialize(&p->isActive, serializer);
        QBoolean.Serialize(&p->isNoDamage, serializer);
        QBoolean.Serialize(&p->isRayCastHit, serializer);
        EntityRef.Serialize(&p->PreviousEntity, serializer);
        EntityRef.Serialize(&p->SelfEntity, serializer);
        EntityRef.Serialize(&p->TargetEntity, serializer);
        FP.Serialize(&p->BallCollisionCooltime, serializer);
        FP.Serialize(&p->BallCollisionCooltimeCounter, serializer);
        FP.Serialize(&p->BallForcedDist, serializer);
        FP.Serialize(&p->BallForcedDistCounter, serializer);
        FP.Serialize(&p->BallIncreaseSpeed, serializer);
        FP.Serialize(&p->BallMaxSpeed, serializer);
        FP.Serialize(&p->BallMinSpeed, serializer);
        FP.Serialize(&p->BallRotationIncreaseSpeed, serializer);
        FP.Serialize(&p->BallRotationMaxSpeed, serializer);
        FP.Serialize(&p->BallRotationMinSpeed, serializer);
        FP.Serialize(&p->BallRotationSpeed, serializer);
        FP.Serialize(&p->BallSpeed, serializer);
        FP.Serialize(&p->BallStartSpeed, serializer);
        FP.Serialize(&p->CurveBallForcedDist, serializer);
        FP.Serialize(&p->CurveBallForcedDistCounter, serializer);
        FP.Serialize(&p->CurveBallRotationSpeed, serializer);
        FP.Serialize(&p->ErrorCheckTimer, serializer);
        FP.Serialize(&p->FreezeBallCooltime, serializer);
        FP.Serialize(&p->FreezeBallCooltimeCounter, serializer);
        FPVector3.Serialize(&p->BallForcedDirection, serializer);
        FPVector3.Serialize(&p->BallObjstacleAvoidDirection, serializer);
        FPVector3.Serialize(&p->CurveBallForcedDirection, serializer);
        FPVector3.Serialize(&p->SkyRocketBallGoingUpPosition, serializer);
        FPVector3.Serialize(&p->TargetPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GameManager : Quantum.IComponentSingleton {
    public const Int32 SIZE = 120;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(88)]
    public FP CountDownTime;
    [FieldOffset(0)]
    public InGamePlayMode CurrentInGamePlayMode;
    [FieldOffset(96)]
    public FP InGameTime;
    [FieldOffset(48)]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr ListOfMapObjectPtr;
    [FieldOffset(52)]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr ListOfPlayers_AIPtr;
    [FieldOffset(56)]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr ListOfPlayers_AllPtr;
    [FieldOffset(60)]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr ListOfPlayers_RealPtr;
    [FieldOffset(64)]
    [FramePrinter.PtrQListAttribute(typeof(PlayerRankInfo))]
    private Quantum.Ptr ListOfPlayers_SoloRankingPtr;
    [FieldOffset(68)]
    [FramePrinter.PtrQListAttribute(typeof(InGamePlayStatisticsData))]
    private Quantum.Ptr ListOfPlayers_StatisticsPtr;
    [FieldOffset(72)]
    [FramePrinter.PtrQListAttribute(typeof(PlayerRankInfo))]
    private Quantum.Ptr ListOfPlayers_TeamRankingPtr;
    [FieldOffset(104)]
    public RNGSession RngSession;
    [FieldOffset(4)]
    public Int32 aiPlayers;
    [FieldOffset(8)]
    public Int32 alivePlayerCount;
    [FieldOffset(80)]
    public EntityRef ball;
    [FieldOffset(12)]
    public Int32 curr_aliveTeamCount;
    [FieldOffset(32)]
    public PlayerRef defaultPlayerRef;
    [FieldOffset(36)]
    public QBoolean isAIPlayerSpawned;
    [FieldOffset(40)]
    public QBoolean isBallSpawned;
    [FieldOffset(44)]
    public QBoolean isEveryPlayerSpawned;
    [FieldOffset(16)]
    public Int32 previous_aliveTeamCount;
    [FieldOffset(20)]
    public Int32 realPlayers;
    [FieldOffset(24)]
    public Int32 totalPlayers;
    [FieldOffset(28)]
    public Int32 totalTeamCount;
    public QListPtr<EntityRef> ListOfMapObject {
      get {
        return new QListPtr<EntityRef>(ListOfMapObjectPtr);
      }
      set {
        ListOfMapObjectPtr = value.Ptr;
      }
    }
    public QListPtr<EntityRef> ListOfPlayers_AI {
      get {
        return new QListPtr<EntityRef>(ListOfPlayers_AIPtr);
      }
      set {
        ListOfPlayers_AIPtr = value.Ptr;
      }
    }
    public QListPtr<EntityRef> ListOfPlayers_All {
      get {
        return new QListPtr<EntityRef>(ListOfPlayers_AllPtr);
      }
      set {
        ListOfPlayers_AllPtr = value.Ptr;
      }
    }
    public QListPtr<EntityRef> ListOfPlayers_Real {
      get {
        return new QListPtr<EntityRef>(ListOfPlayers_RealPtr);
      }
      set {
        ListOfPlayers_RealPtr = value.Ptr;
      }
    }
    public QListPtr<PlayerRankInfo> ListOfPlayers_SoloRanking {
      get {
        return new QListPtr<PlayerRankInfo>(ListOfPlayers_SoloRankingPtr);
      }
      set {
        ListOfPlayers_SoloRankingPtr = value.Ptr;
      }
    }
    public QListPtr<InGamePlayStatisticsData> ListOfPlayers_Statistics {
      get {
        return new QListPtr<InGamePlayStatisticsData>(ListOfPlayers_StatisticsPtr);
      }
      set {
        ListOfPlayers_StatisticsPtr = value.Ptr;
      }
    }
    public QListPtr<PlayerRankInfo> ListOfPlayers_TeamRanking {
      get {
        return new QListPtr<PlayerRankInfo>(ListOfPlayers_TeamRankingPtr);
      }
      set {
        ListOfPlayers_TeamRankingPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + CountDownTime.GetHashCode();
        hash = hash * 31 + (Byte)CurrentInGamePlayMode;
        hash = hash * 31 + InGameTime.GetHashCode();
        hash = hash * 31 + ListOfMapObjectPtr.GetHashCode();
        hash = hash * 31 + ListOfPlayers_AIPtr.GetHashCode();
        hash = hash * 31 + ListOfPlayers_AllPtr.GetHashCode();
        hash = hash * 31 + ListOfPlayers_RealPtr.GetHashCode();
        hash = hash * 31 + ListOfPlayers_SoloRankingPtr.GetHashCode();
        hash = hash * 31 + ListOfPlayers_StatisticsPtr.GetHashCode();
        hash = hash * 31 + ListOfPlayers_TeamRankingPtr.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + aiPlayers.GetHashCode();
        hash = hash * 31 + alivePlayerCount.GetHashCode();
        hash = hash * 31 + ball.GetHashCode();
        hash = hash * 31 + curr_aliveTeamCount.GetHashCode();
        hash = hash * 31 + defaultPlayerRef.GetHashCode();
        hash = hash * 31 + isAIPlayerSpawned.GetHashCode();
        hash = hash * 31 + isBallSpawned.GetHashCode();
        hash = hash * 31 + isEveryPlayerSpawned.GetHashCode();
        hash = hash * 31 + previous_aliveTeamCount.GetHashCode();
        hash = hash * 31 + realPlayers.GetHashCode();
        hash = hash * 31 + totalPlayers.GetHashCode();
        hash = hash * 31 + totalTeamCount.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ListOfMapObjectPtr = default;
      ListOfPlayers_AIPtr = default;
      ListOfPlayers_AllPtr = default;
      ListOfPlayers_RealPtr = default;
      ListOfPlayers_SoloRankingPtr = default;
      ListOfPlayers_StatisticsPtr = default;
      ListOfPlayers_TeamRankingPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (GameManager*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GameManager*)ptr;
        serializer.Stream.Serialize((Byte*)&p->CurrentInGamePlayMode);
        serializer.Stream.Serialize(&p->aiPlayers);
        serializer.Stream.Serialize(&p->alivePlayerCount);
        serializer.Stream.Serialize(&p->curr_aliveTeamCount);
        serializer.Stream.Serialize(&p->previous_aliveTeamCount);
        serializer.Stream.Serialize(&p->realPlayers);
        serializer.Stream.Serialize(&p->totalPlayers);
        serializer.Stream.Serialize(&p->totalTeamCount);
        PlayerRef.Serialize(&p->defaultPlayerRef, serializer);
        QBoolean.Serialize(&p->isAIPlayerSpawned, serializer);
        QBoolean.Serialize(&p->isBallSpawned, serializer);
        QBoolean.Serialize(&p->isEveryPlayerSpawned, serializer);
        QList.Serialize(p->ListOfMapObject, &p->ListOfMapObjectPtr, serializer, StaticDelegates.SerializeEntityRef);
        QList.Serialize(p->ListOfPlayers_AI, &p->ListOfPlayers_AIPtr, serializer, StaticDelegates.SerializeEntityRef);
        QList.Serialize(p->ListOfPlayers_All, &p->ListOfPlayers_AllPtr, serializer, StaticDelegates.SerializeEntityRef);
        QList.Serialize(p->ListOfPlayers_Real, &p->ListOfPlayers_RealPtr, serializer, StaticDelegates.SerializeEntityRef);
        QList.Serialize(p->ListOfPlayers_SoloRanking, &p->ListOfPlayers_SoloRankingPtr, serializer, StaticDelegates.SerializePlayerRankInfo);
        QList.Serialize(p->ListOfPlayers_Statistics, &p->ListOfPlayers_StatisticsPtr, serializer, StaticDelegates.SerializeInGamePlayStatisticsData);
        QList.Serialize(p->ListOfPlayers_TeamRanking, &p->ListOfPlayers_TeamRankingPtr, serializer, StaticDelegates.SerializePlayerRankInfo);
        EntityRef.Serialize(&p->ball, serializer);
        FP.Serialize(&p->CountDownTime, serializer);
        FP.Serialize(&p->InGameTime, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MapObjectRules : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public MapObjectType ObjectType;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 151;
        hash = hash * 31 + (Int32)ObjectType;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MapObjectRules*)ptr;
        serializer.Stream.Serialize((Int32*)&p->ObjectType);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef PlayerRef;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 157;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->PlayerRef, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerRules : Quantum.IComponent {
    public const Int32 SIZE = 232;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(76)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQListAttribute(typeof(PlayerSkilLaunchTiming))]
    private Quantum.Ptr ListOfSkilLaunchlTimingPtr;
    [FieldOffset(80)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQListAttribute(typeof(PlayerSkilRemoveTiming))]
    private Quantum.Ptr ListOfSkillRemoveTimingPtr;
    [FieldOffset(88)]
    [ExcludeFromPrototype()]
    public EntityRef SelfEntity;
    [FieldOffset(96)]
    [ExcludeFromPrototype()]
    public FP activeSkillDuration;
    [FieldOffset(104)]
    [ExcludeFromPrototype()]
    public FP activeSkillDurationCounter;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public Int32 attackDamage;
    [FieldOffset(112)]
    [ExcludeFromPrototype()]
    public FP attackDuration;
    [FieldOffset(120)]
    [ExcludeFromPrototype()]
    public FP attackDurationCounter;
    [FieldOffset(128)]
    [ExcludeFromPrototype()]
    public FP attackRange;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public Int32 currHealthPoint;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public PlayerActiveSkill currentActiveSkillType;
    [FieldOffset(1)]
    [ExcludeFromPrototype()]
    public PlayerPassiveSkill currentPassiveSkillType;
    [FieldOffset(136)]
    [ExcludeFromPrototype()]
    public FP gravity;
    [FieldOffset(144)]
    [ExcludeFromPrototype()]
    public FP inputAttackCooltime;
    [FieldOffset(152)]
    [ExcludeFromPrototype()]
    public FP inputAttackCooltimeCounter;
    [FieldOffset(160)]
    [ExcludeFromPrototype()]
    public FP inputJumpCooltime;
    [FieldOffset(168)]
    [ExcludeFromPrototype()]
    public FP inputJumpCooltimeCounter;
    [FieldOffset(176)]
    [ExcludeFromPrototype()]
    public FP inputSkillCooltime;
    [FieldOffset(184)]
    [ExcludeFromPrototype()]
    public FP inputSkillCooltimeCounter;
    [FieldOffset(28)]
    [ExcludeFromPrototype()]
    public QBoolean isAttacking;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public QBoolean isAutoAttack;
    [FieldOffset(36)]
    [ExcludeFromPrototype()]
    public QBoolean isDead;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public QBoolean isGrounded;
    [FieldOffset(44)]
    [ExcludeFromPrototype()]
    public QBoolean isIdle;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public QBoolean isJumping;
    [FieldOffset(52)]
    [ExcludeFromPrototype()]
    public QBoolean isNearToFloorWhenJump;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public QBoolean isRunning;
    [FieldOffset(60)]
    [ExcludeFromPrototype()]
    public QBoolean isSkill;
    [FieldOffset(64)]
    [ExcludeFromPrototype()]
    public QBoolean isSkill_Dash;
    [FieldOffset(68)]
    [ExcludeFromPrototype()]
    public QBoolean isSkill_Invincible;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public QBoolean isSkill_Shield;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    public Int32 jumpCounter;
    [FieldOffset(192)]
    [ExcludeFromPrototype()]
    public FP jumpDuration;
    [FieldOffset(200)]
    [ExcludeFromPrototype()]
    public FP jumpDurationCounter;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public Int32 jumpMaxCount;
    [FieldOffset(20)]
    [ExcludeFromPrototype()]
    public Int32 maxHealthPoint;
    [FieldOffset(208)]
    [ExcludeFromPrototype()]
    public FP maxSpeed;
    [FieldOffset(216)]
    [ExcludeFromPrototype()]
    public FP passiveSkillDuration;
    [FieldOffset(224)]
    [ExcludeFromPrototype()]
    public FP passiveSkillDurationCounter;
    [FieldOffset(2)]
    [ExcludeFromPrototype()]
    public PlayerType playerType;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public Int32 teamID;
    public QListPtr<PlayerSkilLaunchTiming> ListOfSkilLaunchlTiming {
      get {
        return new QListPtr<PlayerSkilLaunchTiming>(ListOfSkilLaunchlTimingPtr);
      }
      set {
        ListOfSkilLaunchlTimingPtr = value.Ptr;
      }
    }
    public QListPtr<PlayerSkilRemoveTiming> ListOfSkillRemoveTiming {
      get {
        return new QListPtr<PlayerSkilRemoveTiming>(ListOfSkillRemoveTimingPtr);
      }
      set {
        ListOfSkillRemoveTimingPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 163;
        hash = hash * 31 + ListOfSkilLaunchlTimingPtr.GetHashCode();
        hash = hash * 31 + ListOfSkillRemoveTimingPtr.GetHashCode();
        hash = hash * 31 + SelfEntity.GetHashCode();
        hash = hash * 31 + activeSkillDuration.GetHashCode();
        hash = hash * 31 + activeSkillDurationCounter.GetHashCode();
        hash = hash * 31 + attackDamage.GetHashCode();
        hash = hash * 31 + attackDuration.GetHashCode();
        hash = hash * 31 + attackDurationCounter.GetHashCode();
        hash = hash * 31 + attackRange.GetHashCode();
        hash = hash * 31 + currHealthPoint.GetHashCode();
        hash = hash * 31 + (Byte)currentActiveSkillType;
        hash = hash * 31 + (Byte)currentPassiveSkillType;
        hash = hash * 31 + gravity.GetHashCode();
        hash = hash * 31 + inputAttackCooltime.GetHashCode();
        hash = hash * 31 + inputAttackCooltimeCounter.GetHashCode();
        hash = hash * 31 + inputJumpCooltime.GetHashCode();
        hash = hash * 31 + inputJumpCooltimeCounter.GetHashCode();
        hash = hash * 31 + inputSkillCooltime.GetHashCode();
        hash = hash * 31 + inputSkillCooltimeCounter.GetHashCode();
        hash = hash * 31 + isAttacking.GetHashCode();
        hash = hash * 31 + isAutoAttack.GetHashCode();
        hash = hash * 31 + isDead.GetHashCode();
        hash = hash * 31 + isGrounded.GetHashCode();
        hash = hash * 31 + isIdle.GetHashCode();
        hash = hash * 31 + isJumping.GetHashCode();
        hash = hash * 31 + isNearToFloorWhenJump.GetHashCode();
        hash = hash * 31 + isRunning.GetHashCode();
        hash = hash * 31 + isSkill.GetHashCode();
        hash = hash * 31 + isSkill_Dash.GetHashCode();
        hash = hash * 31 + isSkill_Invincible.GetHashCode();
        hash = hash * 31 + isSkill_Shield.GetHashCode();
        hash = hash * 31 + jumpCounter.GetHashCode();
        hash = hash * 31 + jumpDuration.GetHashCode();
        hash = hash * 31 + jumpDurationCounter.GetHashCode();
        hash = hash * 31 + jumpMaxCount.GetHashCode();
        hash = hash * 31 + maxHealthPoint.GetHashCode();
        hash = hash * 31 + maxSpeed.GetHashCode();
        hash = hash * 31 + passiveSkillDuration.GetHashCode();
        hash = hash * 31 + passiveSkillDurationCounter.GetHashCode();
        hash = hash * 31 + (Byte)playerType;
        hash = hash * 31 + teamID.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ListOfSkilLaunchlTimingPtr = default;
      ListOfSkillRemoveTimingPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (PlayerRules*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerRules*)ptr;
        serializer.Stream.Serialize((Byte*)&p->currentActiveSkillType);
        serializer.Stream.Serialize((Byte*)&p->currentPassiveSkillType);
        serializer.Stream.Serialize((Byte*)&p->playerType);
        serializer.Stream.Serialize(&p->attackDamage);
        serializer.Stream.Serialize(&p->currHealthPoint);
        serializer.Stream.Serialize(&p->jumpCounter);
        serializer.Stream.Serialize(&p->jumpMaxCount);
        serializer.Stream.Serialize(&p->maxHealthPoint);
        serializer.Stream.Serialize(&p->teamID);
        QBoolean.Serialize(&p->isAttacking, serializer);
        QBoolean.Serialize(&p->isAutoAttack, serializer);
        QBoolean.Serialize(&p->isDead, serializer);
        QBoolean.Serialize(&p->isGrounded, serializer);
        QBoolean.Serialize(&p->isIdle, serializer);
        QBoolean.Serialize(&p->isJumping, serializer);
        QBoolean.Serialize(&p->isNearToFloorWhenJump, serializer);
        QBoolean.Serialize(&p->isRunning, serializer);
        QBoolean.Serialize(&p->isSkill, serializer);
        QBoolean.Serialize(&p->isSkill_Dash, serializer);
        QBoolean.Serialize(&p->isSkill_Invincible, serializer);
        QBoolean.Serialize(&p->isSkill_Shield, serializer);
        QList.Serialize(p->ListOfSkilLaunchlTiming, &p->ListOfSkilLaunchlTimingPtr, serializer, StaticDelegates.SerializePlayerSkilLaunchTiming);
        QList.Serialize(p->ListOfSkillRemoveTiming, &p->ListOfSkillRemoveTimingPtr, serializer, StaticDelegates.SerializePlayerSkilRemoveTiming);
        EntityRef.Serialize(&p->SelfEntity, serializer);
        FP.Serialize(&p->activeSkillDuration, serializer);
        FP.Serialize(&p->activeSkillDurationCounter, serializer);
        FP.Serialize(&p->attackDuration, serializer);
        FP.Serialize(&p->attackDurationCounter, serializer);
        FP.Serialize(&p->attackRange, serializer);
        FP.Serialize(&p->gravity, serializer);
        FP.Serialize(&p->inputAttackCooltime, serializer);
        FP.Serialize(&p->inputAttackCooltimeCounter, serializer);
        FP.Serialize(&p->inputJumpCooltime, serializer);
        FP.Serialize(&p->inputJumpCooltimeCounter, serializer);
        FP.Serialize(&p->inputSkillCooltime, serializer);
        FP.Serialize(&p->inputSkillCooltimeCounter, serializer);
        FP.Serialize(&p->jumpDuration, serializer);
        FP.Serialize(&p->jumpDurationCounter, serializer);
        FP.Serialize(&p->maxSpeed, serializer);
        FP.Serialize(&p->passiveSkillDuration, serializer);
        FP.Serialize(&p->passiveSkillDurationCounter, serializer);
    }
  }
  public unsafe partial class Frame {
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AIPlayerRules>(Quantum.AIPlayerRules.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.BallRules>(Quantum.BallRules.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.GameManager>(Quantum.GameManager.Serialize, null, Quantum.GameManager.OnRemoved, ComponentFlags.Singleton);
        ComponentTypeId.Add<Quantum.MapObjectRules>(Quantum.MapObjectRules.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerRules>(Quantum.PlayerRules.Serialize, null, Quantum.PlayerRules.OnRemoved, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AIPlayerRules>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AIPlayerRules>();
      BuildSignalsArrayOnComponentAdded<Quantum.BallRules>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BallRules>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.GameManager>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GameManager>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.MapObjectRules>();
      BuildSignalsArrayOnComponentRemoved<Quantum.MapObjectRules>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerRules>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerRules>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->Jump = input.Jump;
      i->Attack = input.Attack;
      i->Skill = input.Skill;
      i->horizontal = input.horizontal;
      i->vertical = input.vertical;
      i->cameraDirection = input.cameraDirection;
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 8;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventGamePlayStateChanged.ID: return typeof(EventGamePlayStateChanged);
          case EventPlayerEvents.ID: return typeof(EventPlayerEvents);
          case EventPlayerSpawned.ID: return typeof(EventPlayerSpawned);
          case EventBallEvents.ID: return typeof(EventBallEvents);
          case EventBallSpawned.ID: return typeof(EventBallSpawned);
          case EventBallTargetChanged.ID: return typeof(EventBallTargetChanged);
          case EventGameResult.ID: return typeof(EventGameResult);
          case EventUpdatePlayerRank.ID: return typeof(EventUpdatePlayerRank);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public EventGamePlayStateChanged GamePlayStateChanged(GamePlayState StateType) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGamePlayStateChanged>(EventGamePlayStateChanged.ID);
        ev.StateType = StateType;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerEvents PlayerEvents(EntityRef Entity, PlayerEvent PlayerEvent) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPlayerEvents>(EventPlayerEvents.ID);
        ev.Entity = Entity;
        ev.PlayerEvent = PlayerEvent;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerSpawned PlayerSpawned(EntityRef Entity, String PID, QBoolean isAI, Int32 teamID, Int32 characterSkinID, Int32 weaponSkinID, String nickname, Int32 rankingPoint) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPlayerSpawned>(EventPlayerSpawned.ID);
        ev.Entity = Entity;
        ev.PID = PID;
        ev.isAI = isAI;
        ev.teamID = teamID;
        ev.characterSkinID = characterSkinID;
        ev.weaponSkinID = weaponSkinID;
        ev.nickname = nickname;
        ev.rankingPoint = rankingPoint;
        _f.AddEvent(ev);
        return ev;
      }
      public EventBallEvents BallEvents(EntityRef Entity, BallEvent BallEvent) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventBallEvents>(EventBallEvents.ID);
        ev.Entity = Entity;
        ev.BallEvent = BallEvent;
        _f.AddEvent(ev);
        return ev;
      }
      public EventBallSpawned BallSpawned(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventBallSpawned>(EventBallSpawned.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventBallTargetChanged BallTargetChanged(EntityRef TargetEntity, EntityRef PrevEntity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventBallTargetChanged>(EventBallTargetChanged.ID);
        ev.TargetEntity = TargetEntity;
        ev.PrevEntity = PrevEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameResult GameResult(InGamePlayMode PlayMode, PlayerRankInfoArray PlayerRankInfoArray, InGamePlayStatisticsArray InGamePlayStatisticsArray) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameResult>(EventGameResult.ID);
        ev.PlayMode = PlayMode;
        ev.PlayerRankInfoArray = PlayerRankInfoArray;
        ev.InGamePlayStatisticsArray = InGamePlayStatisticsArray;
        _f.AddEvent(ev);
        return ev;
      }
      public EventUpdatePlayerRank UpdatePlayerRank(InGamePlayMode PlayMode, PlayerRankInfoArray PlayerRankInfoArray) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventUpdatePlayerRank>(EventUpdatePlayerRank.ID);
        ev.PlayMode = PlayMode;
        ev.PlayerRankInfoArray = PlayerRankInfoArray;
        _f.AddEvent(ev);
        return ev;
      }
    }
    public unsafe partial struct FrameAssets {
      public DynamicCreateObject DynamicCreateObject(AssetRefDynamicCreateObject assetRef) {
         return _f.FindAsset<DynamicCreateObject>(assetRef.Id);
      }
      public GamePlaySettings GamePlaySettings(AssetRefGamePlaySettings assetRef) {
         return _f.FindAsset<GamePlaySettings>(assetRef.Id);
      }
      public InGameDataSettings InGameDataSettings(AssetRefInGameDataSettings assetRef) {
         return _f.FindAsset<InGameDataSettings>(assetRef.Id);
      }
      public CustomMapDataSettings CustomMapDataSettings(AssetRefCustomMapDataSettings assetRef) {
         return _f.FindAsset<CustomMapDataSettings>(assetRef.Id);
      }
    }
  }
  public unsafe partial class EventGamePlayStateChanged : EventBase {
    public new const Int32 ID = 0;
    public GamePlayState StateType;
    protected EventGamePlayStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGamePlayStateChanged() : 
        base(0, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + StateType.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerEvents : EventBase {
    public new const Int32 ID = 1;
    public EntityRef Entity;
    public PlayerEvent PlayerEvent;
    protected EventPlayerEvents(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerEvents() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + PlayerEvent.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerSpawned : EventBase {
    public new const Int32 ID = 2;
    public EntityRef Entity;
    public String PID;
    public QBoolean isAI;
    public Int32 teamID;
    public Int32 characterSkinID;
    public Int32 weaponSkinID;
    public String nickname;
    public Int32 rankingPoint;
    protected EventPlayerSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerSpawned() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + PID.GetHashCode();
        hash = hash * 31 + isAI.GetHashCode();
        hash = hash * 31 + teamID.GetHashCode();
        hash = hash * 31 + characterSkinID.GetHashCode();
        hash = hash * 31 + weaponSkinID.GetHashCode();
        hash = hash * 31 + nickname.GetHashCode();
        hash = hash * 31 + rankingPoint.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventBallEvents : EventBase {
    public new const Int32 ID = 3;
    public EntityRef Entity;
    public BallEvent BallEvent;
    protected EventBallEvents(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventBallEvents() : 
        base(3, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + BallEvent.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventBallSpawned : EventBase {
    public new const Int32 ID = 4;
    public EntityRef Entity;
    protected EventBallSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventBallSpawned() : 
        base(4, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventBallTargetChanged : EventBase {
    public new const Int32 ID = 5;
    public EntityRef TargetEntity;
    public EntityRef PrevEntity;
    protected EventBallTargetChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventBallTargetChanged() : 
        base(5, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + TargetEntity.GetHashCode();
        hash = hash * 31 + PrevEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameResult : EventBase {
    public new const Int32 ID = 6;
    public InGamePlayMode PlayMode;
    public PlayerRankInfoArray PlayerRankInfoArray;
    public InGamePlayStatisticsArray InGamePlayStatisticsArray;
    protected EventGameResult(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameResult() : 
        base(6, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + PlayMode.GetHashCode();
        hash = hash * 31 + PlayerRankInfoArray.GetHashCode();
        hash = hash * 31 + InGamePlayStatisticsArray.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventUpdatePlayerRank : EventBase {
    public new const Int32 ID = 7;
    public InGamePlayMode PlayMode;
    public PlayerRankInfoArray PlayerRankInfoArray;
    protected EventUpdatePlayerRank(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventUpdatePlayerRank() : 
        base(7, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + PlayMode.GetHashCode();
        hash = hash * 31 + PlayerRankInfoArray.GetHashCode();
        return hash;
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefCustomMapDataSettings value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefDynamicCreateObject value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGamePlaySettings value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefInGameDataSettings value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class DynamicCreateObject : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GamePlaySettings : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class InGameDataSettings : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class CustomMapDataSettings : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AIPlayerRules_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BallRules_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GameManager_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.MapObjectRules_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerLink_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerRules_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
  }
  public static unsafe partial class StaticDelegates {
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializePlayerRankInfo;
    public static FrameSerializer.Delegate SerializeInGamePlayStatisticsData;
    public static FrameSerializer.Delegate SerializePlayerSkilLaunchTiming;
    public static FrameSerializer.Delegate SerializePlayerSkilRemoveTiming;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitGen() {
      SerializeEntityRef = EntityRef.Serialize;
      SerializePlayerRankInfo = Quantum.PlayerRankInfo.Serialize;
      SerializeInGamePlayStatisticsData = Quantum.InGamePlayStatisticsData.Serialize;
      SerializePlayerSkilLaunchTiming = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializePlayerSkilRemoveTiming = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializeInput = Quantum.Input.Serialize;
    }
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AIDefaultData), Quantum.AIDefaultData.SIZE);
      Register(typeof(Quantum.AIDifficulty), 1);
      Register(typeof(Quantum.AIPlayerRules), Quantum.AIPlayerRules.SIZE);
      Register(typeof(Quantum.AIPlayerState), 1);
      Register(typeof(Quantum.AdditionalReferenceData), Quantum.AdditionalReferenceData.SIZE);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(Quantum.AssetRefCustomMapDataSettings), Quantum.AssetRefCustomMapDataSettings.SIZE);
      Register(typeof(Quantum.AssetRefDynamicCreateObject), Quantum.AssetRefDynamicCreateObject.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefGamePlaySettings), Quantum.AssetRefGamePlaySettings.SIZE);
      Register(typeof(Quantum.AssetRefInGameDataSettings), Quantum.AssetRefInGameDataSettings.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.BallDefaultData), Quantum.BallDefaultData.SIZE);
      Register(typeof(Quantum.BallEvent), 4);
      Register(typeof(Quantum.BallMovementLogic), 1);
      Register(typeof(Quantum.BallRules), Quantum.BallRules.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(Quantum.CheatType), 1);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPBounds3), FPBounds3.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(Quantum.GameManager), Quantum.GameManager.SIZE);
      Register(typeof(Quantum.GamePlayState), 1);
      Register(typeof(Quantum.GetBallTargetType), 1);
      Register(typeof(HingeJoint), HingeJoint.SIZE);
      Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      Register(typeof(Hit), Hit.SIZE);
      Register(typeof(Hit3D), Hit3D.SIZE);
      Register(typeof(Quantum.InGamePlayMode), 1);
      Register(typeof(Quantum.InGamePlayStatisticsArray), Quantum.InGamePlayStatisticsArray.SIZE);
      Register(typeof(Quantum.InGamePlayStatisticsData), Quantum.InGamePlayStatisticsData.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(Joint), Joint.SIZE);
      Register(typeof(Joint3D), Joint3D.SIZE);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(Quantum.MapObjectRules), Quantum.MapObjectRules.SIZE);
      Register(typeof(Quantum.MapObjectType), 4);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.PlayerActiveSkill), 1);
      Register(typeof(Quantum.PlayerDefaultData), Quantum.PlayerDefaultData.SIZE);
      Register(typeof(Quantum.PlayerEvent), 4);
      Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      Register(typeof(Quantum.PlayerPassiveSkill), 1);
      Register(typeof(Quantum.PlayerRankInfo), Quantum.PlayerRankInfo.SIZE);
      Register(typeof(Quantum.PlayerRankInfoArray), Quantum.PlayerRankInfoArray.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Quantum.PlayerRules), Quantum.PlayerRules.SIZE);
      Register(typeof(Quantum.PlayerSkilLaunchTiming), 1);
      Register(typeof(Quantum.PlayerSkilRemoveTiming), 1);
      Register(typeof(Quantum.PlayerType), 1);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Shape2D), Shape2D.SIZE);
      Register(typeof(Shape3D), Shape3D.SIZE);
      Register(typeof(SpringJoint), SpringJoint.SIZE);
      Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AIDifficulty>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AIPlayerState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefCustomMapDataSettings>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefDynamicCreateObject>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGamePlaySettings>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefInGameDataSettings>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BallEvent>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BallMovementLogic>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.CheatType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GamePlayState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GetBallTargetType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InGamePlayMode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.MapObjectType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerActiveSkill>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerEvent>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerPassiveSkill>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerSkilLaunchTiming>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerSkilRemoveTiming>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerType>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(AIDifficulty))]
  public unsafe partial struct AIDifficulty_Prototype {
    public Byte Value;
    public static implicit operator AIDifficulty(AIDifficulty_Prototype value) {
        return (AIDifficulty)value.Value;
    }
    public static implicit operator AIDifficulty_Prototype(AIDifficulty value) {
        return new AIDifficulty_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIPlayerState))]
  public unsafe partial struct AIPlayerState_Prototype {
    public Byte Value;
    public static implicit operator AIPlayerState(AIPlayerState_Prototype value) {
        return (AIPlayerState)value.Value;
    }
    public static implicit operator AIPlayerState_Prototype(AIPlayerState value) {
        return new AIPlayerState_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BallEvent))]
  public unsafe partial struct BallEvent_Prototype {
    public Int32 Value;
    public static implicit operator BallEvent(BallEvent_Prototype value) {
        return (BallEvent)value.Value;
    }
    public static implicit operator BallEvent_Prototype(BallEvent value) {
        return new BallEvent_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BallMovementLogic))]
  public unsafe partial struct BallMovementLogic_Prototype {
    public Byte Value;
    public static implicit operator BallMovementLogic(BallMovementLogic_Prototype value) {
        return (BallMovementLogic)value.Value;
    }
    public static implicit operator BallMovementLogic_Prototype(BallMovementLogic value) {
        return new BallMovementLogic_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(CheatType))]
  public unsafe partial struct CheatType_Prototype {
    public Byte Value;
    public static implicit operator CheatType(CheatType_Prototype value) {
        return (CheatType)value.Value;
    }
    public static implicit operator CheatType_Prototype(CheatType value) {
        return new CheatType_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GamePlayState))]
  public unsafe partial struct GamePlayState_Prototype {
    public Byte Value;
    public static implicit operator GamePlayState(GamePlayState_Prototype value) {
        return (GamePlayState)value.Value;
    }
    public static implicit operator GamePlayState_Prototype(GamePlayState value) {
        return new GamePlayState_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GetBallTargetType))]
  public unsafe partial struct GetBallTargetType_Prototype {
    public Byte Value;
    public static implicit operator GetBallTargetType(GetBallTargetType_Prototype value) {
        return (GetBallTargetType)value.Value;
    }
    public static implicit operator GetBallTargetType_Prototype(GetBallTargetType value) {
        return new GetBallTargetType_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InGamePlayMode))]
  public unsafe partial struct InGamePlayMode_Prototype {
    public Byte Value;
    public static implicit operator InGamePlayMode(InGamePlayMode_Prototype value) {
        return (InGamePlayMode)value.Value;
    }
    public static implicit operator InGamePlayMode_Prototype(InGamePlayMode value) {
        return new InGamePlayMode_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(MapObjectType))]
  public unsafe partial struct MapObjectType_Prototype {
    public Int32 Value;
    public static implicit operator MapObjectType(MapObjectType_Prototype value) {
        return (MapObjectType)value.Value;
    }
    public static implicit operator MapObjectType_Prototype(MapObjectType value) {
        return new MapObjectType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerActiveSkill))]
  public unsafe partial struct PlayerActiveSkill_Prototype {
    public Byte Value;
    public static implicit operator PlayerActiveSkill(PlayerActiveSkill_Prototype value) {
        return (PlayerActiveSkill)value.Value;
    }
    public static implicit operator PlayerActiveSkill_Prototype(PlayerActiveSkill value) {
        return new PlayerActiveSkill_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerEvent))]
  public unsafe partial struct PlayerEvent_Prototype {
    public Int32 Value;
    public static implicit operator PlayerEvent(PlayerEvent_Prototype value) {
        return (PlayerEvent)value.Value;
    }
    public static implicit operator PlayerEvent_Prototype(PlayerEvent value) {
        return new PlayerEvent_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerPassiveSkill))]
  public unsafe partial struct PlayerPassiveSkill_Prototype {
    public Byte Value;
    public static implicit operator PlayerPassiveSkill(PlayerPassiveSkill_Prototype value) {
        return (PlayerPassiveSkill)value.Value;
    }
    public static implicit operator PlayerPassiveSkill_Prototype(PlayerPassiveSkill value) {
        return new PlayerPassiveSkill_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerSkilLaunchTiming))]
  public unsafe partial struct PlayerSkilLaunchTiming_Prototype {
    public Byte Value;
    public static implicit operator PlayerSkilLaunchTiming(PlayerSkilLaunchTiming_Prototype value) {
        return (PlayerSkilLaunchTiming)value.Value;
    }
    public static implicit operator PlayerSkilLaunchTiming_Prototype(PlayerSkilLaunchTiming value) {
        return new PlayerSkilLaunchTiming_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerSkilRemoveTiming))]
  public unsafe partial struct PlayerSkilRemoveTiming_Prototype {
    public Byte Value;
    public static implicit operator PlayerSkilRemoveTiming(PlayerSkilRemoveTiming_Prototype value) {
        return (PlayerSkilRemoveTiming)value.Value;
    }
    public static implicit operator PlayerSkilRemoveTiming_Prototype(PlayerSkilRemoveTiming value) {
        return new PlayerSkilRemoveTiming_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerType))]
  public unsafe partial struct PlayerType_Prototype {
    public Byte Value;
    public static implicit operator PlayerType(PlayerType_Prototype value) {
        return (PlayerType)value.Value;
    }
    public static implicit operator PlayerType_Prototype(PlayerType value) {
        return new PlayerType_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIDefaultData))]
  public sealed unsafe partial class AIDefaultData_Prototype : StructPrototype {
    public PlayerDefaultData_Prototype PlayerDafaultData;
    public PlayerDefaultData_Prototype PlayerAdditionalStatsData;
    public Int32 CoolTime_Dash;
    public Int32 CoolTime_FreezeBall;
    public Int32 CoolTime_FastBall;
    public Int32 CoolTime_Shield;
    public Int32 CoolTime_TakeBallTarget;
    public Int32 CoolTime_BlindZone;
    public Int32 CoolTime_ChangeBallTarget;
    public Int32 CoolTime_CurveBall;
    public Int32 CoolTime_SkyRocketBall;
    partial void MaterializeUser(Frame frame, ref AIDefaultData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref AIDefaultData result, in PrototypeMaterializationContext context) {
      result.CoolTime_BlindZone = this.CoolTime_BlindZone;
      result.CoolTime_ChangeBallTarget = this.CoolTime_ChangeBallTarget;
      result.CoolTime_CurveBall = this.CoolTime_CurveBall;
      result.CoolTime_Dash = this.CoolTime_Dash;
      result.CoolTime_FastBall = this.CoolTime_FastBall;
      result.CoolTime_FreezeBall = this.CoolTime_FreezeBall;
      result.CoolTime_Shield = this.CoolTime_Shield;
      result.CoolTime_SkyRocketBall = this.CoolTime_SkyRocketBall;
      result.CoolTime_TakeBallTarget = this.CoolTime_TakeBallTarget;
      this.PlayerAdditionalStatsData.Materialize(frame, ref result.PlayerAdditionalStatsData, in context);
      this.PlayerDafaultData.Materialize(frame, ref result.PlayerDafaultData, in context);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIPlayerRules))]
  public sealed unsafe partial class AIPlayerRules_Prototype : ComponentPrototype<AIPlayerRules> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref AIPlayerRules result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AIPlayerRules component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AIPlayerRules result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AdditionalReferenceData))]
  public sealed unsafe partial class AdditionalReferenceData_Prototype : StructPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref AdditionalReferenceData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref AdditionalReferenceData result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BallDefaultData))]
  public sealed unsafe partial class BallDefaultData_Prototype : StructPrototype {
    public Int32 BallStartSpeed;
    public Int32 BallMinSpeed;
    public Int32 BallIncreaseSpeed;
    public Int32 BallMaxSpeed;
    public Int32 BallRotationSpeed;
    public Int32 BallRotationMinSpeed;
    public Int32 BallRotationIncreaseSpeed;
    public Int32 BallRotationMaxSpeed;
    public Int32 DefaultAttackDamage;
    public Int32 BallCollisionCooltime;
    partial void MaterializeUser(Frame frame, ref BallDefaultData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BallDefaultData result, in PrototypeMaterializationContext context) {
      result.BallCollisionCooltime = this.BallCollisionCooltime;
      result.BallIncreaseSpeed = this.BallIncreaseSpeed;
      result.BallMaxSpeed = this.BallMaxSpeed;
      result.BallMinSpeed = this.BallMinSpeed;
      result.BallRotationIncreaseSpeed = this.BallRotationIncreaseSpeed;
      result.BallRotationMaxSpeed = this.BallRotationMaxSpeed;
      result.BallRotationMinSpeed = this.BallRotationMinSpeed;
      result.BallRotationSpeed = this.BallRotationSpeed;
      result.BallStartSpeed = this.BallStartSpeed;
      result.DefaultAttackDamage = this.DefaultAttackDamage;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BallRules))]
  public sealed unsafe partial class BallRules_Prototype : ComponentPrototype<BallRules> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref BallRules result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BallRules component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BallRules result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GameManager))]
  public sealed unsafe partial class GameManager_Prototype : ComponentPrototype<GameManager> {
    public InGamePlayMode_Prototype CurrentInGamePlayMode;
    public PlayerRef defaultPlayerRef;
    public Int32 totalPlayers;
    public Int32 realPlayers;
    public Int32 aiPlayers;
    public Int32 totalTeamCount;
    public FP CountDownTime;
    public FP InGameTime;
    [DynamicCollectionAttribute()]
    public MapEntityId[] ListOfPlayers_All = {};
    [DynamicCollectionAttribute()]
    public MapEntityId[] ListOfPlayers_Real = {};
    [DynamicCollectionAttribute()]
    public MapEntityId[] ListOfPlayers_AI = {};
    public MapEntityId ball;
    [DynamicCollectionAttribute()]
    public MapEntityId[] ListOfMapObject = {};
    public QBoolean isAIPlayerSpawned;
    public QBoolean isEveryPlayerSpawned;
    public QBoolean isBallSpawned;
    public Int32 alivePlayerCount;
    public Int32 curr_aliveTeamCount;
    public Int32 previous_aliveTeamCount;
    [DynamicCollectionAttribute()]
    public PlayerRankInfo_Prototype[] ListOfPlayers_SoloRanking = {};
    [DynamicCollectionAttribute()]
    public PlayerRankInfo_Prototype[] ListOfPlayers_TeamRanking = {};
    [DynamicCollectionAttribute()]
    public InGamePlayStatisticsData_Prototype[] ListOfPlayers_Statistics = {};
    public RNGSession RngSession;
    partial void MaterializeUser(Frame frame, ref GameManager result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GameManager component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GameManager result, in PrototypeMaterializationContext context) {
      result.CountDownTime = this.CountDownTime;
      result.CurrentInGamePlayMode = this.CurrentInGamePlayMode;
      result.InGameTime = this.InGameTime;
      if (this.ListOfMapObject.Length == 0) {
        result.ListOfMapObject = default;
      } else {
        var list = frame.AllocateList(result.ListOfMapObject, this.ListOfMapObject.Length);
        for (int i = 0; i < this.ListOfMapObject.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.ListOfMapObject[i], in context, out tmp);
          list.Add(tmp);
        }
        result.ListOfMapObject = list;
      }
      if (this.ListOfPlayers_AI.Length == 0) {
        result.ListOfPlayers_AI = default;
      } else {
        var list = frame.AllocateList(result.ListOfPlayers_AI, this.ListOfPlayers_AI.Length);
        for (int i = 0; i < this.ListOfPlayers_AI.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.ListOfPlayers_AI[i], in context, out tmp);
          list.Add(tmp);
        }
        result.ListOfPlayers_AI = list;
      }
      if (this.ListOfPlayers_All.Length == 0) {
        result.ListOfPlayers_All = default;
      } else {
        var list = frame.AllocateList(result.ListOfPlayers_All, this.ListOfPlayers_All.Length);
        for (int i = 0; i < this.ListOfPlayers_All.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.ListOfPlayers_All[i], in context, out tmp);
          list.Add(tmp);
        }
        result.ListOfPlayers_All = list;
      }
      if (this.ListOfPlayers_Real.Length == 0) {
        result.ListOfPlayers_Real = default;
      } else {
        var list = frame.AllocateList(result.ListOfPlayers_Real, this.ListOfPlayers_Real.Length);
        for (int i = 0; i < this.ListOfPlayers_Real.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.ListOfPlayers_Real[i], in context, out tmp);
          list.Add(tmp);
        }
        result.ListOfPlayers_Real = list;
      }
      if (this.ListOfPlayers_SoloRanking.Length == 0) {
        result.ListOfPlayers_SoloRanking = default;
      } else {
        var list = frame.AllocateList(result.ListOfPlayers_SoloRanking, this.ListOfPlayers_SoloRanking.Length);
        for (int i = 0; i < this.ListOfPlayers_SoloRanking.Length; ++i) {
          Quantum.PlayerRankInfo tmp = default;
          this.ListOfPlayers_SoloRanking[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.ListOfPlayers_SoloRanking = list;
      }
      if (this.ListOfPlayers_Statistics.Length == 0) {
        result.ListOfPlayers_Statistics = default;
      } else {
        var list = frame.AllocateList(result.ListOfPlayers_Statistics, this.ListOfPlayers_Statistics.Length);
        for (int i = 0; i < this.ListOfPlayers_Statistics.Length; ++i) {
          Quantum.InGamePlayStatisticsData tmp = default;
          this.ListOfPlayers_Statistics[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.ListOfPlayers_Statistics = list;
      }
      if (this.ListOfPlayers_TeamRanking.Length == 0) {
        result.ListOfPlayers_TeamRanking = default;
      } else {
        var list = frame.AllocateList(result.ListOfPlayers_TeamRanking, this.ListOfPlayers_TeamRanking.Length);
        for (int i = 0; i < this.ListOfPlayers_TeamRanking.Length; ++i) {
          Quantum.PlayerRankInfo tmp = default;
          this.ListOfPlayers_TeamRanking[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.ListOfPlayers_TeamRanking = list;
      }
      result.RngSession = this.RngSession;
      result.aiPlayers = this.aiPlayers;
      result.alivePlayerCount = this.alivePlayerCount;
      PrototypeValidator.FindMapEntity(this.ball, in context, out result.ball);
      result.curr_aliveTeamCount = this.curr_aliveTeamCount;
      result.defaultPlayerRef = this.defaultPlayerRef;
      result.isAIPlayerSpawned = this.isAIPlayerSpawned;
      result.isBallSpawned = this.isBallSpawned;
      result.isEveryPlayerSpawned = this.isEveryPlayerSpawned;
      result.previous_aliveTeamCount = this.previous_aliveTeamCount;
      result.realPlayers = this.realPlayers;
      result.totalPlayers = this.totalPlayers;
      result.totalTeamCount = this.totalTeamCount;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InGamePlayStatisticsArray))]
  public sealed unsafe partial class InGamePlayStatisticsArray_Prototype : StructPrototype {
    [ArrayLengthAttribute(10)]
    public InGamePlayStatisticsData_Prototype[] InGamePlayStatisticsDataArr = new InGamePlayStatisticsData_Prototype[10];
    partial void MaterializeUser(Frame frame, ref InGamePlayStatisticsArray result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref InGamePlayStatisticsArray result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(InGamePlayStatisticsDataArr, 10, in context); i < count; ++i) {
        this.InGamePlayStatisticsDataArr[i].Materialize(frame, ref *result.InGamePlayStatisticsDataArr.GetPointer(i), in context);
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InGamePlayStatisticsData))]
  public sealed unsafe partial class InGamePlayStatisticsData_Prototype : StructPrototype {
    public MapEntityId player;
    public Byte activeSkillType;
    public Byte passiveSkillType;
    public Int32 mapID;
    public Int32 matchPlayMode;
    public Int32 attackSuccessCount;
    public Int16 killCount;
    public Int16 dieCount;
    public Int32 skillActivationCount;
    partial void MaterializeUser(Frame frame, ref InGamePlayStatisticsData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref InGamePlayStatisticsData result, in PrototypeMaterializationContext context) {
      result.activeSkillType = this.activeSkillType;
      result.attackSuccessCount = this.attackSuccessCount;
      result.dieCount = this.dieCount;
      result.killCount = this.killCount;
      result.mapID = this.mapID;
      result.matchPlayMode = this.matchPlayMode;
      result.passiveSkillType = this.passiveSkillType;
      PrototypeValidator.FindMapEntity(this.player, in context, out result.player);
      result.skillActivationCount = this.skillActivationCount;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public sealed unsafe partial class Input_Prototype : StructPrototype {
    public QBoolean Jump;
    public QBoolean Attack;
    public QBoolean Skill;
    public FP horizontal;
    public FP vertical;
    public FPVector3 cameraDirection;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      result.Attack = this.Attack;
      result.Jump = this.Jump;
      result.Skill = this.Skill;
      result.cameraDirection = this.cameraDirection;
      result.horizontal = this.horizontal;
      result.vertical = this.vertical;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(MapObjectRules))]
  public sealed unsafe partial class MapObjectRules_Prototype : ComponentPrototype<MapObjectRules> {
    public MapObjectType_Prototype ObjectType;
    partial void MaterializeUser(Frame frame, ref MapObjectRules result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      MapObjectRules component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref MapObjectRules result, in PrototypeMaterializationContext context) {
      result.ObjectType = this.ObjectType;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerDefaultData))]
  public sealed unsafe partial class PlayerDefaultData_Prototype : StructPrototype {
    public Int32 MaxHealthPoint;
    public Int32 AttackDamage;
    public Int32 AttackRange;
    public Int32 AttackDuration;
    public Int32 MaxSpeed;
    public Int32 Input_AttackCooltime;
    public Int32 Input_JumpCooltime;
    public Int32 Input_SkillCooltime;
    partial void MaterializeUser(Frame frame, ref PlayerDefaultData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref PlayerDefaultData result, in PrototypeMaterializationContext context) {
      result.AttackDamage = this.AttackDamage;
      result.AttackDuration = this.AttackDuration;
      result.AttackRange = this.AttackRange;
      result.Input_AttackCooltime = this.Input_AttackCooltime;
      result.Input_JumpCooltime = this.Input_JumpCooltime;
      result.Input_SkillCooltime = this.Input_SkillCooltime;
      result.MaxHealthPoint = this.MaxHealthPoint;
      result.MaxSpeed = this.MaxSpeed;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerLink))]
  public sealed unsafe partial class PlayerLink_Prototype : ComponentPrototype<PlayerLink> {
    public PlayerRef PlayerRef;
    partial void MaterializeUser(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerLink component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context) {
      result.PlayerRef = this.PlayerRef;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerRankInfo))]
  public sealed unsafe partial class PlayerRankInfo_Prototype : StructPrototype {
    public MapEntityId player;
    public Int32 rank_solo;
    public Int32 rank_team;
    partial void MaterializeUser(Frame frame, ref PlayerRankInfo result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref PlayerRankInfo result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.player, in context, out result.player);
      result.rank_solo = this.rank_solo;
      result.rank_team = this.rank_team;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerRankInfoArray))]
  public sealed unsafe partial class PlayerRankInfoArray_Prototype : StructPrototype {
    [ArrayLengthAttribute(10)]
    public PlayerRankInfo_Prototype[] PlayerRankInfoArr = new PlayerRankInfo_Prototype[10];
    partial void MaterializeUser(Frame frame, ref PlayerRankInfoArray result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref PlayerRankInfoArray result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(PlayerRankInfoArr, 10, in context); i < count; ++i) {
        this.PlayerRankInfoArr[i].Materialize(frame, ref *result.PlayerRankInfoArr.GetPointer(i), in context);
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerRules))]
  public sealed unsafe partial class PlayerRules_Prototype : ComponentPrototype<PlayerRules> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref PlayerRules result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerRules component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerRules result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.AIPlayerRules_Prototype> AIPlayerRules;
    [ArrayLength(0, 1)]
    public List<Prototypes.BallRules_Prototype> BallRules;
    [ArrayLength(0, 1)]
    public List<Prototypes.GameManager_Prototype> GameManager;
    [ArrayLength(0, 1)]
    public List<Prototypes.MapObjectRules_Prototype> MapObjectRules;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerLink_Prototype> PlayerLink;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerRules_Prototype> PlayerRules;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AIPlayerRules, target);
      Collect(BallRules, target);
      Collect(GameManager, target);
      Collect(MapObjectRules, target);
      Collect(PlayerLink, target);
      Collect(PlayerRules, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AIPlayerRules_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AIPlayerRules);
      }
      public override void Visit(Prototypes.BallRules_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BallRules);
      }
      public override void Visit(Prototypes.GameManager_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GameManager);
      }
      public override void Visit(Prototypes.MapObjectRules_Prototype prototype) {
        Storage.Store(prototype, ref Storage.MapObjectRules);
      }
      public override void Visit(Prototypes.PlayerLink_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerLink);
      }
      public override void Visit(Prototypes.PlayerRules_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerRules);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
